name: Download from MEGA.nz

on:
  workflow_dispatch:
    inputs:
      mega_urls:
        description: 'MEGA.nz URLs to download (up to 5, separated by commas or spaces)'
        required: true
      maximize_disk_space:
        description: Maximize disk space. Check if getting out of disk space error
        type: boolean

jobs:
  download:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Maximize disk space
      if: inputs.maximize_disk_space
      uses: easimon/maximize-build-space@v10
      with:
        remove-dotnet: true
        remove-android: true
        remove-haskell: true
        remove-codeql: true
        remove-docker-images: true
        
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install MEGAcmd
      run: |
        sudo apt-get update 
        sudo apt-get install -y wget lsb-release
        UBUNTU_VERSION=$(lsb_release -rs) 
        wget -P /tmp "https://mega.nz/linux/repo/xUbuntu_${UBUNTU_VERSION}/amd64/megacmd-xUbuntu_${UBUNTU_VERSION}_amd64.deb" 
        sudo apt install -y "/tmp/megacmd-xUbuntu_${UBUNTU_VERSION}_amd64.deb"

    - name: Verify MEGAcmd installation
      run: mega-version
        
    - name: Download from MEGA.nz
      run: |
        # Replace commas with spaces, then split on spaces
        URLS=$(echo "${{ inputs.mega_urls }}" | tr ',' ' ')
        for url in $URLS; do
          mega-get "$url"
        done
    
    - name: List downloaded files
      run: ls -la

    - name: Remove media creation date metadata
      run: |
        sudo apt-get install -y libimage-exiftool-perl
        shopt -s nullglob
        for file in *; do
          if [[ -f "$file" ]]; then
            exiftool -overwrite_original \
              -CreateDate= \
              -DateTimeOriginal= \
              -ModifyDate= \
              "$file" || true
          fi
        done
        echo "Metadata removal complete."

    - name: Delete specified files 
      run: | 
        rm -f LICENSE 
        rm -f "Piece Size Table.csv" 
        rm -f README.md 
        rm -f index.html 
        rm -f link.url 
        rm -f p.py 
        rm -f test.py 
        rm -f test2.py 
        UBUNTU_VERSION=$(lsb_release -rs) 
        MEGACMD_DEB="megacmd-xUbuntu_${UBUNTU_VERSION}_amd64.deb" 
        rm -f "$MEGACMD_DEB"

    - name: Sanitize, split, and upload files
      run: |
        shopt -s nullglob
        gh release create mega-downloads5 --title "mega-downloads5" --notes "mega-downloads5" || true
        for file in *; do
          if [[ -f "$file" && "$file" != "README.md" && "$file" != ".github" && "$file" != ".gitignore" ]]; then
            extension="${file##*.}"
            random_name=$(uuidgen)
            new_name="${random_name}.${extension}"

            while gh release view mega-downloads5 --json assets --jq ".assets[].name" | grep -q "$new_name"; do
              random_name=$(uuidgen)
              new_name="${random_name}.${extension}"
            done

            filesize=$(stat -c%s "$file")
            if [ "$filesize" -gt 2000000000 ]; then
              split -b 2000m "$file" "${new_name}.part_"
              for part in "${new_name}.part_"*; do
                part_size=$(stat -c%s "$part")
                part_new_name="${new_name}.${part##*.}"

                while gh release view mega-downloads5 --json assets --jq ".assets[].name" | grep -q "$part_new_name"; do
                  random_name=$(uuidgen)
                  new_name="${random_name}.${extension}"
                  part_new_name="${new_name}.${part##*.}"
                done

                echo "Uploading $part ($part_size bytes) as $part_new_name"
                gh release upload "mega-downloads5" "./$part" --clobber
              done
            else
              mv "$file" "$new_name"
              file_size=$(stat -c%s "$new_name")
              echo "Uploading $new_name ($file_size bytes)"
              gh release upload "mega-downloads5" "./$new_name" --clobber
            fi
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}

    - name: List files after processing
      run: ls -la
